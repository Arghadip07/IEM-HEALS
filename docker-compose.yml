version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: healthguard-db
    environment:
      POSTGRES_DB: healthguard
      POSTGRES_USER: healthguard
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-EXEC", "pg_isready -U healthguard -d healthguard"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - healthguard-network

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: healthguard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - healthguard-network

  # HealthGuard Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthguard-app
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://healthguard:password@postgres:5432/healthguard
      - REDIS_URL=redis://redis:6379
      - SESSION_SECRET=your-session-secret-change-in-production
      - PORT=5000
      - APP_URL=http://localhost:5000
      
      # External API Keys (set these in .env file)
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
      
      # Development settings
      - DEV_MODE_DISABLE_EMAILS=false
      - DEV_MODE_DISABLE_SMS=false
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - healthguard-network

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: healthguard-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@healthguard.app
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - healthguard-network
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  healthguard-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

# docker-compose.dev.yml
services:
  app:
    build:
      target: development
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - HOT_RELOAD=true
    command: npm run dev
    
  # Enable all admin tools in development
  pgadmin:
    profiles: []
